{
  "info": {
    "name": "API Integration Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Provider Creation Flow",
      "item": [
        {
          "name": "Create First Appointment Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/appointment-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "appointment-types"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Service Type 1\",\n  \"duration\": 60,\n  \"description\": \"First service type\",\n  \"price\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('success', true);",
                  "    pm.expect(responseData).to.have.property('data');",
                  "});",
                  "",
                  "// Store firstAppointmentTypeId for later use",
                  "const responseData = pm.response.json();",
                  "pm.collectionVariables.set('firstAppointmentTypeId', responseData.data._id);",
                  "console.log('Stored firstAppointmentTypeId:', pm.collectionVariables.get('firstAppointmentTypeId'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Second Appointment Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/appointment-types",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "appointment-types"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Service Type 2\",\n  \"duration\": 30,\n  \"description\": \"Second service type\",\n  \"price\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('success', true);",
                  "    pm.expect(responseData).to.have.property('data');",
                  "});",
                  "",
                  "// Store secondAppointmentTypeId for later use",
                  "const responseData = pm.response.json();",
                  "pm.collectionVariables.set('secondAppointmentTypeId', responseData.data._id);",
                  "console.log('Stored secondAppointmentTypeId:', pm.collectionVariables.get('secondAppointmentTypeId'));"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Provider with Created Services",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/providers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "providers"
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"servicesOffered\": [\n    \"{{firstAppointmentTypeId}}\",\n    \"{{secondAppointmentTypeId}}\"\n  ],\n  \"availability\": [\n    {\n      \"dayOfWeek\": \"Monday\",\n      \"timeSlots\": [\n        {\n          \"startTime\": \"09:00\",\n          \"endTime\": \"17:00\",\n          \"requiresTravelTime\": false,\n          \"spansOvernight\": false\n        }\n      ],\n      \"isRecurring\": true\n    }\n  ],\n  \"user\": {\n    \"email\": \"provider@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"phone\": \"+1234567890\",\n    \"password\": \"securePassword123\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Check required variables",
                  "pm.expect(pm.collectionVariables.get('firstAppointmentTypeId')).to.exist;",
                  "pm.expect(pm.collectionVariables.get('secondAppointmentTypeId')).to.exist;",
                  "",
                  "pm.test('Status code is successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('success', true);",
                  "    pm.expect(responseData).to.have.property('data');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Cleanup",
      "item": [
        {
          "name": "Delete All AppointmentTypes",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/appointment-types/cleanup",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "appointment-types",
                "cleanup"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete All Providers",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/providers/cleanup",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "providers",
                "cleanup"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "localhost:3000/api",
      "type": "string"
    }
  ]
}